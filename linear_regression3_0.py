# -*- coding: utf-8 -*-
"""Linear Regression3.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-o5_Q-6jW03v0KMdkxjB6GUyXxnxUtDa

#  <center><u>LINEAR REGRESSION<u><center>

<p style='text-align: right;'> Total points =51</p>

###  Linear Regression


Linear Regression is a statistical technique which is used to find the linear relationship between dependent and one or more independent variables. This technique is applicable for Supervised learning Regression problems where we try to predict a continuous variable.


Linear Regression can be further classified into two types – Simple and Multiple Linear Regression. It is the simplest form of Linear Regression where we fit a straight line to the data.

Read this blog in incognito mode: https://towardsdatascience.com/understanding-the-fundamentals-of-linear-regression-7e64afd614e1#:~:text=What%20is%20Linear%20Regression%3F,represented%20with%20a%20straight%20line.

## Simple Linear Regression - Model Assumptions

The Linear Regression Model is based on several assumptions which are listed below:-

i.	Linear relationship
ii.	Multivariate normality
iii.	No or little multicollinearity
iv.	No auto-correlation
v.	Homoscedasticity


### i.	Linear relationship


The relationship between response and feature variables should be linear. This linear relationship assumption can be tested by plotting a scatter-plot between response and feature variables.


### ii.	Multivariate normality

The linear regression model requires all variables to be multivariate normal. A multivariate normal distribution means a vector in multiple normally distributed variables, where any linear combination of the variables is also normally distributed.


### iii.	No or little multicollinearity

It is assumed that there is little or no multicollinearity in the data. Multicollinearity occurs when the features (or independent variables) are highly correlated.


### iv.	No auto-correlation

Also, it is assumed that there is little or no auto-correlation in the data. Autocorrelation occurs when the residual errors are not independent from each other.


### v.	Homoscedasticity

Homoscedasticity describes a situation in which the error term (that is, the noise in the model) is the same across all values of the independent variables. It means the residuals are same across the regression line. It can be checked by looking at scatter plot.

# **`WATCH ALL VIDEOS IN THE PORTAL`**

## **`Video 1 : Assumptions of Linear Regression`**

###  Simple Linear Regression (SLR)

Simple Linear Regression (or SLR) is the simplest model in machine learning. It models the linear relationship between the independent and dependent variables.

This assignment is based on the TV and Sales data .
There is one independent or input variable which represents the TV data and is denoted by X. Similarly, there is one dependent or output variable which represents the Sales and is denoted by y. We want to build a linear relationship between these variables. This linear relationship can be modelled by mathematical equation of the form:-

                 
                 Y = β0   + β1*X    -------------   (1)
                 

In this equation, X and Y are called independent and dependent variables respectively,

β1 is the coefficient for independent variable and

β0 is the constant term.

β0 and β1 are called parameters of the model.



For simplicity, we can compare the above equation with the basic line equation of the form:-

                   y = ax + b       ----------------- (2)

We can see that

slope of the line is given by, a =  β1,  and

intercept of the line by b =  β0.


In this Simple Linear Regression model, we want to fit a line which estimates the linear relationship between X and Y. So, the question of fitting reduces to estimating the parameters of the model β0 and β1.



## Ordinary Least Square Method

The TV and Sales data are given by X and y respectively. We can draw a scatter plot between X and y which shows the relationship between them.



Now, our task is to find a line which best fits this scatter plot. This line will help us to predict the value of any Target variable for any given Feature variable. This line is called **Regression line**.


We can define an error function for any line. Then, the regression line is the one which minimizes the error function. Such an error function is also called a **Cost function**.

By below chart you might understand more clearly

![image.png](attachment:image.png)

##Problem Statement
Build a model which predicts sales based on the money spent on different platforms for marketing.

Understanding the Data
Let's start with the following steps:

1. Importing data using the pandas library
2. Understanding the structure of the data

<p style='text-align: right;'> 2*2=4 points</p>
"""

# Import necessary libraries numpy as np, pandas as pd, pyplot as plt
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

# The above command sets the backend of matplotlib to the 'inline' backend.
# It means the output of plotting commands is displayed inline.

"""<p style='text-align: right;'> 2*6 = 12 points</p>

## About the dataset

Let's import data from the following url:-

https://www.kaggle.com/ashydv/advertising-dataset

Data Dict:<br>
There are 3 Input Variables and 1 Output Variable (Sales).<br>
The data type of all the input variables is float64. The data type of out variable (Sales) is float64.<br>
"""

# Import the data
df = pd.read_csv('/content/advertising.csv')

#drop radio and newspaper column
df = df.drop(['Radio','Newspaper'],axis=1)

"""### pandas shape attribute

The shape attribute of the pandas dataframe gives the dimensions of the dataframe.
"""

# View the dimensions of df
df = pd.DataFrame(df)
df.shape

"""### pandas head() method

"""

# View the top 5 rows of df
df.head()

"""### pandas info() method"""

# View dataframe summary
df.info()

"""### pandas describe() method"""

# View descriptive statistics
df.describe()

"""## Independent and Dependent Variables


### Independent variable

Independent variable is also called Input variable and is denoted by X. In practical applications, independent variable is also called Feature variable or Predictor variable. We can denote it as:-

Independent or Input variable (X) = Feature variable = Predictor variable


### Dependent variable

Dependent variable is also called Output variable and is denoted by y.

Dependent variable is also called Target variable or Response variable. It can be denoted it as follows:-

Dependent or Output variable (y) = Target variable = Response variable

## **`Video 2 : Linear Regression-Splitting and describing dataframe`**

<p style='text-align: right;'> 2 points</p>
"""

# Declare feature variable and target variable

X = df.drop('Sales',axis=1)
y = df['Sales']

# TV and Sales data values are given by X and y respectively.


# Values attribute of pandas dataframe returns the numpy arrays.


X = X.values
y = y.values

y = y.reshape(-1,1)

"""## Visual exploratory data analysis

Visualize the relationship between X and y by plotting a scatterplot between X and y.

## **`Video 3: Linear Regression-EDA on dataset`**

<p style='text-align: right;'> 2 points</p>
"""

# Plot scatter plot between X and y
plt.scatter(X,y)
plt.xlabel('TV')
plt.ylabel('Sales')
plt.show()

"""Hey buddy! did you notice ? the above graph shows some sort of relationship between sales and TV. Don't you think this shows positive linear relation? i.e when As TV's value increases sales increases ans same is vise-versa.

# Visualising Data Using Seaborn

## **`Video 4 : Linear Regression-Reshaping concept`**

<p style='text-align: right;'> 2*2=4 points</p>
"""

# Commented out IPython magic to ensure Python compatibility.
# import seaborn with alias sns
import seaborn as sns



# import %matplotlib inline to visualise in the notebook
# %matplotlib inline

# Visualise the relationship between the features and the response using scatterplots
sns.pairplot(df)
plt.show()

# plot a pairplot also for df
df=pd.DataFrame(df)
sns.pairplot(df)
plt.show()

"""Ohoo! We can see very well that you have done good practice of Visualisation in your EDA assignment. Anyways the above graph also shows positive linear relation between both TV and Sales.

## Checking dimensions of X and y

We need to check the dimensions of X and y to make sure they are in right format for Scikit-Learn API.

<p style='text-align: right;'> 2points</p>
"""

# Print the dimensions of X and y
print(X.shape)
print(y.shape)

"""## Reshaping X and y

Since we are working with only one feature variable, so we need to reshape using Numpy reshape() method.

E.g, If you have an array of shape (3,2) then reshaping it with (-1, 1), then the array will get reshaped in such a way that the resulting array has only 1 column and this is only possible by having 6 rows, hence, (6,1)

You have seen the above example. Now you smarty! try reshaping on your data.

<p style='text-align: right;'> 2*2 = 4 points</p>
"""

# Reshape X and y
X = X.reshape(-1,1)
y = y.reshape(-1,1)

# Print the dimensions of X and y after reshaping
print(X.shape)
print(y.shape)

"""Cool right!

## Difference in dimensions of X and y after reshaping


Hey! You can see the difference in diminsions of X and y before and after reshaping.

It is essential in this case because getting the feature and target variable right is an important precursor to model building.

# Performing Simple Linear Regression

Equation of linear regression<br>
$y = c + m_1x_1 + m_2x_2 + ... + m_nx_n$

-  $y$ is the response
-  $c$ is the intercept
-  $m_1$ is the coefficient for the first feature
-  $m_n$ is the coefficient for the nth feature<br>

In our case:

$y = c + m_1 \times TV$

The $m$ values are called the model **coefficients** or **model parameters**.

## **`Video 5 : Linear Regression-Fitting The Regression Model`**

---

## Mechanics of the model

Hey! before you read further, it is good to understand the generic structure of modeling using the scikit-learn library. Broadly, the steps to build any model can be divided as follows:

Split the dataset into two sets – the training set and the test set. Then, instantiate the regressor lm and fit it on the training set with the fit method.

In this step, the model learned the relationships between the training data (X_train, y_train).

Oh Yeah! Now the model is ready to make predictions on the test data (X_test). Hence, predict on the test data using the predict method.

The steps are as follow:

## Train test split


Split the dataset into two sets namely - train set and test set.

The model learn the relationships from the training data and predict on test data.

Hey Smarty!! It's absolutely fine if you didn't understand the theory well! We are here to help you make comfortable with all the concepts slowly as we proceeds towards our upcoming assignments.

No fear when AI_4_All is here :)

<p style='text-align: right;'> 2+2+3=7 points</p>
"""

# import train test split
from sklearn.model_selection import train_test_split
# Split X and y into training and test data sets
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)

# print shapes of X_train,y_train, X_test, y_test
print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

# Fit the linear model
from sklearn.linear_model import LinearRegression

# Instantiate the linear regression object lm
lm = LinearRegression()

# Train the model using training data sets
lm.fit(X_train,y_train)

# Predict on the test data
y_pred = lm.predict(X_test)

"""## Model slope and intercept term

The model slope is given by lm.coef_ and model intercept term is given by lm.intercept_.

for example. if the estimated model slope and intercept values are 1.60509347 and  -11.16003616.

So, the equation of the fitted regression line will be:-

y = 1.60509347 * x - 11.16003616

<p style='text-align: right;'> 2 points</p>
"""

# Compute model slope and intercept
slope = lm.coef_
intercept = lm.intercept_

a = slope[0]
b = intercept[0]

# also print a and b
print(a)
print(b)

# So comment below, our fitted regression line here is ?


#y=0.05483488 * x + 7.20655455


# That is our linear model.

"""Wohoo! Awesome job done!

## Making predictions


To make prediction, on an individual TV value,


		lm.predict(Xi)
        

where Xi is the TV data value of the ith observation.

<p style='text-align: right;'> 2 points</p>
"""

# Predicting Sales values on first five 5 TV  datasets only
print(X_test[0:5])
print(lm.predict(X_test[0:5]))

"""We know that you can also do prediction for all values of TV available in our dataset

Can you show it now?


"""

# prediction for all X present in the dataset
y_pred = lm.predict(X)
df['Sales_pred'] = y_pred
df.head()

"""## Regression metrics for model performance


Now, it is the time to evaluate model performance.

For regression problems, there are two ways to compute the model performance. They are RMSE (Root Mean Square Error) and R-Squared Value. These are explained below:-  


### RMSE

    RMSE is the standard deviation of the residuals. So, RMSE gives us the standard deviation of the unexplained variance by the model. It can be calculated by taking square root of Mean Squared Error.
    RMSE is an absolute measure of fit. It gives us how spread the residuals are, given by the standard deviation of the residuals. The more concentrated the data is around the regression line, the lower the residuals and hence lower the standard deviation of residuals. It results in lower values of RMSE. So, lower values of RMSE indicate better fit of data.

Formula:
![image.png](attachment:image.png)

### R-Squared

    (R2) Correlation explains the strength of the relationship between an independent and dependent variable,whereas R-square explains to what extent the variance of one variable explains the variance of the second variable. Hence It may also be known as the coefficient of determination.
    So, if the R2 of a model is 0.50, then approximately half of the observed variation can be explained by the model's inputs.
    In general, the higher the R2 Score value, the better the model fits the data. Usually, its value ranges from 0 to 1. So, we want its value to be as close to 1. Its value can become negative if our model is wrong.

Fomula:

![image.png](attachment:image.png)

<p style='text-align: right;'> 2*2 = 4 points</p>

Read this blog for metrics in regression: https://machinelearningmastery.com/regression-metrics-for-machine-learning/

## **`Video 6 : Linear Regression-Metrics In Regression`**

---
"""

# Calculate and print Root Mean Square Error(RMSE)
from sklearn.metrics import mean_squared_error
import numpy as np
y_pred_test = lm.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test,y_pred_test))
print(rmse)

# Calculate and print r2_score
from sklearn.metrics import r2_score
r2 = r2_score(y_test,y_pred_test)
print(r2)

"""## Interpretation and Conclusion


The RMSE value has been found to be  2.2759. It means the standard deviation for our prediction is  2.2759. which is quite less. Sometimes we can also expect the RMSE to be less than  2.2759. So, the model is good fit to the data.


In business decisions, the benchmark for the R2 score value is 0.7. It means if R2 score value >= 0.7, then the model is good enough to deploy on unseen data whereas if R2 score value < 0.7, then the model is not good enough to deploy. Our R2 score value has been found to be  0.8149. It means that this model explains  81.49 % of the variance in our dependent variable. So, the R2 score value confirms that the model is good enough to deploy because it provides good fit to the data.

Wohoo! Really good job done!

<p style='text-align: right;'> 2 points</p>
"""

# Plot the Regression Line between X and Y as shown in below output.
plt.scatter(X,y)
plt.plot(X,y_pred,color='red')
plt.xlabel('TV')
plt.ylabel('Sales')
plt.show()

"""As you can see above, the regression line fits the data quite well. Wow!

## Residual analysis



A linear regression model may not represent the data appropriately. The model may be a poor fit to the data. So, we should validate our model by defining and examining residual plots.

The difference between the observed value of the dependent variable (y) and the predicted value (ŷi) is called the residual and is denoted by e or error. The scatter-plot of these residuals is called residual plot.

If the data points in a residual plot are randomly dispersed around horizontal axis and an approximate zero residual mean, a linear regression model may be appropriate for the data. Otherwise a non-linear model may be more appropriate.

If we take a look at the generated ‘Residual errors’ plot, we can clearly see that the train data plot pattern is non-random. Same is the case with the test data plot pattern.
So, it suggests a better-fit for a non-linear model.

Check this blog for residual analysis: https://towardsdatascience.com/how-to-use-residual-plots-for-regression-model-validation-c3c70e8ab378#:~:text=Residuals,and%20the%20observed%20actual%20value.

## **`Video 7 : Linear Regression-Residual Errors`**


---
"""

# Plotting residual errors
plt.scatter(y_pred,y-y_pred)
plt.xlabel('Y_pred')
plt.ylabel('Residual')
plt.show()

"""## Checking for Overfitting and Underfitting


We will see training set score and test set score.

You can excpect the training set score to be 0.7996, which is averagely good. So, the model learned the relationships quite appropriately from the training data. Thus, the model performs good on the test data as test score will be  0.8149. It is a clear sign of good fit/ balanced fit. Hence, we can validated our finding that the linear regression model provides good fit to the data.


**Underfitting**: Your model is underfitting the training data when the model performs poorly on the training data. This is because the model is unable to capture the relationship between the input examples (often called X) and the target values (often called Y).

**Overfitting**: Your model is overfitting your training data when you see that the model performs well on the training data but does not perform well on the evaluation data. This is because the model is memorizing the data it has seen and is unable to generalize to unseen examples.

You see the difference visually as below:

![image.png](attachment:image.png)

<p style='text-align: right;'> 2 points</p>
"""

# Checking for Overfitting or Underfitting the data by calculation score using score function.
print(lm.score(X_train,y_train))
print(lm.score(X_test,y_test))

"""# **`Summary`**

- We learnt assumptions required for linear regression model.
- We built linear regression model using sklearn and also got the basic idea of overfitting and underfitting.
- We also did residual analysis to cross check one of the linear regression assumption.

#  Congratulations on building your first machine learning model! Smile please! :)

# FeedBack
We hope you’ve enjoyed this course so far. We’re committed to helping you use AIforAll course to
its full potential so you can grow with us. And that’s why we need your help in form of a feedback
here

We appreciate your time for your thoughtful comment here

https://forms.gle/AGReqrmyeJ6bFcCf7
"""